# –ë–æ—Ç –ø–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –û–≤–∏, –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –∏ –≥–æ–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–∫–æ–º –∏ —à–µ–¥—É–ª–µ—Ä–æ–º
# pip install pyTelegramBotAPI requests schedule BeautifulSoup
import telebot
import requests
import json
import schedule
import time
from datetime import datetime
from threading import Thread
from bs4 import BeautifulSoup

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '8199513220:AAGl09XIIqzpfF1zlJQIzAinT7tjic38e7c'
bot = telebot.TeleBot(TOKEN)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞
Global_var_goals = 0

# –†–µ–∫–æ—Ä–¥ –û–≤–µ—á–∫–∏–Ω–∞
GRETZKY_RECORD = 1000

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USER_DATA_FILE = 'users.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
try:
    with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
        users_data = json.load(file)
except FileNotFoundError:
    print("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
    users_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_users_data():
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(users_data, file, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_message_to_all_users(message_text):
    for user_id, user_info in users_data.items():
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(user_info['chat_id'], message_text)
        except Exception as e:
            print(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info['username']} (ID: {user_id}): {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º)
def handle_private_message(message):
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "No username"
    first_name = message.from_user.first_name if message.from_user.first_name else "No first name"
    last_name = message.from_user.last_name if message.from_user.last_name else "No last name"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'chat_id': message.chat.id
        }
        save_users_data()
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {username} (ID: {user_id})")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±–∏–ª –ª–∏ –û–≤–µ—á–∫–∏–Ω
def check_ovechkin_goals():
    global Global_var_goals
    goals_result, games_played_result = get_ovechkin_goals()
    if goals_result is None:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–∞—Ö –û–≤–µ—á–∫–∏–Ω–∞")
        return

    current_date_check = datetime.now().strftime('%d.%m.%Y')

    if goals_result > Global_var_goals:
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        message_text = (f"üèíü•Ö –û–≤–µ—á–∫–∏–Ω –∑–∞–±–∏–ª!\n–ù–∞ {current_date_check} –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: "
                        f"{goals_result} –≥–æ–ª–æ–≤.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        send_message_to_all_users(message_text)
        print(f"–û–≤–µ—á–∫–∏–Ω –∑–∞–±–∏–ª! –ï–≥–æ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {goals_result} –≥–æ–ª–æ–≤ –Ω–∞ {current_date_check}.")
        Global_var_goals = goals_result
    else:
        print(f"–ù–æ–≤—ã—Ö –≥–æ–ª–æ–≤ –Ω–µ—Ç. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {goals_result} (–±—ã–ª–æ: {Global_var_goals})")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞ –û–≤–µ—á–∫–∏–Ω–∞
def get_ovechkin_goals():
    # –ü–∞—Ä—Å–∏–º —é—Ä–ª
    url = "https://www.espn.com/nhl/player/stats/_/id/3101/alex-ovechkin"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            # –ò—â–µ–º –±–ª–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π Career
            stats_block = soup.find_all('span', class_='fw-bold clr-gray-01')
            if stats_block and len(stats_block) >= 3:
                # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–π–± –∏ –∏–≥—Ä
                goals = stats_block[2].text.strip()
                games_played = stats_block[1].text.strip()
                return int(goals), int(games_played)
        return None, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞ –û–≤–µ—á–∫–∏–Ω–∞
@bot.message_handler(commands=['check_goals'])
def check_goals(message):
    global Global_var_goals
    goals_result, games_played_result = get_ovechkin_goals()
    current_date = datetime.now().strftime('%d.%m.%Y')
    if goals_result is not None:
        remaining_goals = GRETZKY_RECORD - goals_result
        google_link = (f"https://www.google.com/search?q="
                       f"–ù–∞+{current_date}+"
                       f"—Å–∫–æ–ª—å–∫–æ+—à–∞–π–±+–æ—Å—Ç–∞–ª–æ—Å—å+–∑–∞–±–∏—Ç—å+–ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É+–û–≤–µ—á–∫–∏–Ω—É+–¥–æ+—Ä–µ–∫–æ—Ä–¥–∞+1000 Ovi")
        response_text = (f"\n–û—Å—Ç–∞–ª–æ—Å—å {remaining_goals} —à–∞–π–±\n\n"
                         f"–ù–∞ {current_date} —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –û–≤–µ—á–∫–∏–Ω–∞: {goals_result} —à–∞–π–±(—ã) –≤"
                         f" {games_played_result} –º–∞—Ç—á–∞—Ö.\n"
                         f"–î–æ —Ä–µ–∫–æ—Ä–¥–∞ \"1000 Ovi\" –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–±–∏—Ç—å:"
                         f" {remaining_goals}"
                         f" —à–∞–π–±.\n"
                         f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: [Google]({google_link})"
                         )
        bot.send_message(message.chat.id, response_text, parse_mode="Markdown")
        Global_var_goals = goals_result
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–∞—Ö –û–≤–µ—á–∫–∏–Ω–∞.")


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    handle_private_message(message)
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button = telebot.types.KeyboardButton('üèí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á–µ—Ç –û–≤–µ—á–∫–∏–Ω–∞')
    markup.add(button)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á–µ—Ç –û–≤–µ—á–∫–∏–Ω–∞:",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üèí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á–µ—Ç –û–≤–µ—á–∫–∏–Ω–∞')
def handle_button(message):
    check_goals(message)


# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
def schedule_tasks():
    schedule.every().day.at("07:00").do(check_ovechkin_goals)
    schedule.every().day.at("12:00").do(check_ovechkin_goals)
    schedule.every().day.at("19:00").do(check_ovechkin_goals)

    while True:
        schedule.run_pending()
        time.sleep(60)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    goals, _ = get_ovechkin_goals()
    if goals is not None:
        Global_var_goals = goals
        print(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –û–≤–µ—á–∫–∏–Ω–∞: {goals} –≥–æ–ª–æ–≤")

    Thread(target=schedule_tasks, daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            time.sleep(5)